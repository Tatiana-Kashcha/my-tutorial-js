// https://codeguida.com/post/199
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from?retiredLocale=uk

// const arr = [1, 2, 3];
// const arr1 = [4, 5, 6];

// // declaration
// function someName(arr, value) {
//     for (let i = 0; i < arr.length; i += 1) {
//         arr[i] *= value;
//     }
// }
// console.log(someName(arr, 3));
// console.log(someName(arr1, 4));
// console.log(arr);
// console.log(arr1);


// expression

// const someName = function (arr, value) {
//     for (let i = 0; i < arr.length; i += 1) {
//         arr[i] *= value;
//     }
// }

// someName(arr, 3)
// someName(arr1, 4)
// console.log(arr);
// console.log(arr1);


// const arr = [423, 56, 23, 4];
// const arr1 = [1, 45, 1, 2]

// function add(param) {
//     let sum = 0;
//     for (const num of param) {
//         sum += num
//     }
//     return sum;
// }
// console.log(add(arr));
// console.log(add(arr1));





// const arr = [1, 2, 3];
// const arr1 = [4, 5, 6];


// function someName(arr, value = 1) {
//     for (let i = 0; i < arr.length; i += 1) {
//         arr[i] *= value;
//     }
// }

// someName(arr)
// someName(arr1, 4)
// console.log(arr);
// console.log(arr1);



// function add() {

//     // const arr = Array.from(arguments);
//     // const arr = [...arguments];
//     // console.log(arr);
// }


// add(1, 2, 3, ['a', 'b']);
// add(4, 5, 6, 7);
// add(7, 8, 9, 1, 1, 2);




// function checkValue(a, b) {
//     const result = a + b;
//     if (result > 0) {
//         return true;
//     } else if (result < 0) {
//         return false;
//     }

//     return '—Ü–µ –Ω—É–ª—å'
// }

// console.log(checkValue(1, 4));

// console.log(checkValue(1, -4));

// console.log(checkValue(1, -1));

// let a = 10

// function foo() {
//     a = 15;
// }
// foo()
// a = 22;
// foo()
// console.log(a);






// let a = 10;

// function foo(){
//     a = 11;
//     let a = 14;

// }
// foo()
// a = 19;

// console.log(a);



// let a = 10;

// function foo() {
//     let a = 14;
//     a = 11;

// }
// foo()
// a = 19;

// console.log(a);


// let a = 10;

// function foo() {
//     a = 100;
// }
// foo()
// a = 19;

// if (a < 100){
//     foo()
//     a = 14
// }else{
//     a = 13;
// }

// console.log(a);

// const arr = [1, 2, 3];

// function foo(a) {
//     a.splice(0, 1)
// }
// arr.splice(0, 1)
// foo(arr)
// console.log(arr);




// let a = 15;


// function foo(x) {
//     x = 10;
// };

// console.log(foo(a));
// console.log('a', a);




// function add(a, b) {
//     return a + b
// }


// function checkValue(a, b) {
//     const value = add(a, b)
//     if (value > 0) {
//         return true;
//     } else if (value < 0) {
//         return false;
//     }

//     return '—Ü–µ –Ω—É–ª—å'
// }

// checkValue(1, 1)


// function foo() {
//     boo()
// }

// function boo() {
//     foo()
// }
// foo()


// —è–∫—â–æ –ø—ñ—Å–ª—è –¥–≤–æ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –∑–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —â–æ –±—É–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–µ—Ä—à–∏—Ö –¥–≤–æ—Ö —è–∫–∏–º –±—É–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å - –¥–æ –ø—Ä–∏–∫–ª–∞–¥—É function add (a,b) + function checkVelue (a,b)?

// const result = add(1, 2) + checkValue(4, -3)
// console.log(result);


// Example 1 - –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏. –î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.

// –í–∞–≥–∞ —Ç–∞ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏. –ù–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ 24.7 –∞–±–æ 24,7, —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.

// –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏;

// function calcBMI(weight, height) {
//     weight = Number(weight.replace(',', '.'));
//     height = Number(height.replace(',', '.'));

//     // return Number(weight / Math.pow(height, 2).toFixed(1))
//     return Number((weight / height ** 2).toFixed(1))

// }

// const bmi = calcBMI('88,3', '1.75');
// console.log(bmi); // 28.8



// Example 2 - –ù–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a,b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.


// function min(a, b) {
//     if (a > b) {
//         return b;
//     }

//     return a;
// }

// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1





// Example 3 - –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// function getRectArea(dimensions) {
//     dimensions = dimensions.split(' ');

//     // const first = Number(dimensions[0]);
//     // const second = Number(dimensions[1]);

//     // return first * second

//     return Number(dimensions[0]) * Number(dimensions[1]).toString()
//     console.log(second);
// }

// console.log(getRectArea('8 11'));
// console.log(getRectArea('18 11'));




// Example 4 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for, —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

// –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 -'Poly' –≤–∏–≤–µ–¥–µ  3 - Ajax.

// function logItems(items) {
//     console.log('--------------');
//     // for (let i = 0, num = 1; i < items.length; i+=1, num+=1){
//     //     console.log(`${num} - ${items[i]}`);
//     // }
//     for (let i = 0; i < items.length; i += 1) {
//         console.log(`${i+1} - ${items[i]}`);
//     }
// }

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);





// Example 5 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é printContactsInfo(names, phones) —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ names —Ç–∞ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// function printContactsInfo(names, phones) {
//     names = names.split(',')
//     phones = phones.split(',')

//     // for(let i = 0; i< names.length; i+=1){
//     //     console.log(`${names[i]} - ${phones[i]}`);
//     // }
//     // console.log(phones);

//     for (let i = 0; i < names.length, i < phones.length; i += 1) {
//         console.log(`${names[i]} - ${phones[i]}`);
//     }
//     console.log(phones);

// }
// printContactsInfo(
//     'Jacob,William,Solomon,Artem',
//     '89001234567,89001112233,890055566377,890055566378',
// );




// Example 6 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers)—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.

// function findLargestNumber() {
//     // let max = arguments[0];
//     // for(const arg of arguments){
//     //     if(max < arg){
//     //         max = arg
//     //     }
//     // }

//     // return max;
// // console.log(arguments);
//     return Math.max(...arguments);
// }

// console.log(findLargestNumber(2, 17, 94, 1, 23, 37)); // 94
// console.log(findLargestNumber(49, 4, 7, 83, 12)); // 83




// Example 7 - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è. –£—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞–º–∏.

// function calAverage() {
//     // const numbers = Array.from(arguments)
//     // const numbers = [...arguments]
//     // console.log(numbers);
//     let sum = 0;

//     for (const num of numbers) {
//         sum += num
//     }

//     return sum / numbers.length;
// }

// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2





// Example 8 - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é formatTime(minutes) —è–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è minutes (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω) —É —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω —Ç–∞ —Ö–≤–∏–ª–∏–Ω HH:MM.


// function formatTime(minutes) {
//     const hours = Math.floor(minutes / 60).toString().padStart(2,'0');
//     minutes = (minutes % 60).toString().padStart(2,'0');
//     console.log(typeof minutes);
//     return `${hours}:${minutes}`
// }

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"




// Example 9 - –ö–æ–ª–µ–∫—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ (includes, i ndexOf,push —ñ —Ç. –¥.)
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:
// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

// addCourse(name) - –¥–æ–¥–∞—î –∫—É—Ä—Å –¥–æ –∫—ñ–Ω—Ü—è –∫–æ–ª–µ–∫—Ü—ñ—ó
// removeCourse(name) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// updateCourse(oldName, newName) - –∑–º—ñ–Ω—é—î —ñ–º'—è –Ω–∞ –Ω–æ–≤–µ
// function addCourse(name){
//     if(courses.includes(name)){
//         return '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'
//     }
//     courses.push(name)
// }

// // addCourse('Express');
// // console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// console.log(addCourse('CSS'));; // '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'
// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

// function removeCourse(name) {
//     // if (courses.includes(name)) {
//     //     const idx = courses.indexOf(name);
//     //     courses.splice(idx, 1);
//     //     return;
//     // }
// // includes => !!~indexof
//     const idx = courses.indexOf(name);
//     // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT
//     if (!!~idx) {
//         courses.splice(idx, 1);
//         return;
//     }
//     return "–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
// }


// const arr = ['a', 'b', 'c'];
// // const idx = arr.indexOf('a');//0 => false
// // console.log(!!~idx);//-1 => true
// // console.log(!!-(idx + 1));//-1 => true

// const idx = arr.indexOf('d') // -1 => true
// console.log(!!~idx); // 0 => false
// console.log(!!-(idx + 1));
// if (!!~idx) {
//     console.log('yes');
// } else {
//     console.log('no');
// }



// removeCourse('React');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// console.log(removeCourse('Vue')); // '–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

// const courses = ['HTML', 'CSS', 'JavaScript', 'Express', 'React', 'PostgreSQL'];

// function updateCourse(oldName, newName) {
//     // if (courses.includes(oldName)) {
//     //     const idx = courses.indexOf(oldName);
//     //     courses.splice(idx, 1, newName);
//     //     return;
//     // }

//     const idx = courses.indexOf(oldName);
//     if (!!~idx) {
//         courses.splice(idx, 1, newName);
//         return;
//     }

//     return '–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º\'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

// }

// updateCourse('Express', 'NestJS');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']
// // console.log(updateCourse('Vue','NestJS')); // '–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

// const arr = [1,2,3]
// console.log(arr);

// function foo(){
// console.log(arguments);
// }
// foo(1,2,3)

